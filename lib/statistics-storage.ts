'use client';

import { UserProgress, TypingSession, TypingResult, Achievement } from '@/types/typing';

const STORAGE_KEY = 'nabor-slova-statistics';
const SESSIONS_KEY = 'nabor-slova-sessions';

export class StatisticsStorage {
  private static instance: StatisticsStorage;
  
  private constructor() {}
  
  static getInstance(): StatisticsStorage {
    if (!StatisticsStorage.instance) {
      StatisticsStorage.instance = new StatisticsStorage();
    }
    return StatisticsStorage.instance;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getUserProgress(): UserProgress {
    if (typeof window === 'undefined') {
      return this.getDefaultProgress();
    }

    const stored = localStorage.getItem(STORAGE_KEY);
    if (stored) {
      try {
        const progress = JSON.parse(stored);
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã
        if (progress.recentSessions) {
          progress.recentSessions = progress.recentSessions.map((session: any) => ({
            ...session,
            date: new Date(session.date)
          }));
        }
        return progress;
      } catch (error) {
        console.error('Error parsing stored progress:', error);
        return this.getDefaultProgress();
      }
    }
    return this.getDefaultProgress();
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
  saveSession(lessonId: string, result: TypingResult): void {
    if (typeof window === 'undefined') return;

    const session: TypingSession = {
      id: `session-${Date.now()}`,
      lessonId,
      date: new Date(),
      result,
      mistakes: [] // TODO: –¥–æ–±–∞–≤–∏—Ç—å —Å–±–æ—Ä –æ—à–∏–±–æ–∫
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
    const sessions = this.getAllSessions();
    sessions.push(session);
    
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–µ—Å—Å–∏–π
    const recentSessions = sessions.slice(-100);
    localStorage.setItem(SESSIONS_KEY, JSON.stringify(recentSessions));

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    this.updateProgress(result);
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏
  getAllSessions(): TypingSession[] {
    if (typeof window === 'undefined') return [];

    const stored = localStorage.getItem(SESSIONS_KEY);
    if (stored) {
      try {
        const sessions = JSON.parse(stored);
        return sessions.map((session: any) => ({
          ...session,
          date: new Date(session.date)
        }));
      } catch (error) {
        console.error('Error parsing sessions:', error);
        return [];
      }
    }
    return [];
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
  private updateProgress(result: TypingResult): void {
    const progress = this.getUserProgress();
    const sessions = this.getAllSessions();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    progress.totalLessonsCompleted += 1;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    if (result.wpm > progress.bestWpm) {
      progress.bestWpm = result.wpm;
    }
    if (result.accuracy > progress.bestAccuracy) {
      progress.bestAccuracy = result.accuracy;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    const allResults = sessions.map(s => s.result);
    if (allResults.length > 0) {
      progress.averageWpm = Math.round(
        allResults.reduce((sum, r) => sum + r.wpm, 0) / allResults.length
      );
      progress.averageAccuracy = Math.round(
        allResults.reduce((sum, r) => sum + r.accuracy, 0) / allResults.length
      );
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è
    progress.totalTimeSpent += result.totalTime;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    progress.recentSessions = sessions.slice(-10);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    this.checkAchievements(progress);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º
    localStorage.setItem(STORAGE_KEY, JSON.stringify(progress));
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  private checkAchievements(progress: UserProgress): void {
    const achievements: Achievement[] = [
      {
        id: 'first-lesson',
        title: '–ü–µ—Ä–≤—ã–π —É—Ä–æ–∫',
        description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫',
        icon: 'üéØ',
        requirement: { type: 'lessons_completed', value: 1 },
        unlocked: false
      },
      {
        id: 'speed-demon-30',
        title: '–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –Ω–∞–±–æ—Ä',
        description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ 30 WPM',
        icon: '‚ö°',
        requirement: { type: 'wpm', value: 30 },
        unlocked: false
      },
      {
        id: 'speed-demon-60',
        title: '–ú–∞—Å—Ç–µ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏',
        description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ 60 WPM',
        icon: 'üöÄ',
        requirement: { type: 'wpm', value: 60 },
        unlocked: false
      },
      {
        id: 'accuracy-90',
        title: '–¢–æ—á–Ω–æ—Å—Ç—å - –≤–µ–∂–ª–∏–≤–æ—Å—Ç—å –∫–æ—Ä–æ–ª–µ–π',
        description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ 90%',
        icon: 'üéØ',
        requirement: { type: 'accuracy', value: 90 },
        unlocked: false
      },
      {
        id: 'accuracy-95',
        title: '–ò–¥–µ–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å',
        description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ 95%',
        icon: 'üíé',
        requirement: { type: 'accuracy', value: 95 },
        unlocked: false
      },
      {
        id: 'lessons-10',
        title: '–ü—Ä–∏–ª–µ–∂–Ω—ã–π —É—á–µ–Ω–∏–∫',
        description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ 10 —É—Ä–æ–∫–æ–≤',
        icon: 'üìö',
        requirement: { type: 'lessons_completed', value: 10 },
        unlocked: false
      },
      {
        id: 'lessons-50',
        title: '–ú–∞—Å—Ç–µ—Ä –ø–µ—á–∞—Ç–∏',
        description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ 50 —É—Ä–æ–∫–æ–≤',
        icon: 'üèÜ',
        requirement: { type: 'lessons_completed', value: 50 },
        unlocked: false
      }
    ];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    achievements.forEach(achievement => {
      const existingAchievement = progress.achievements.find(a => a.id === achievement.id);
      
      if (!existingAchievement || !existingAchievement.unlocked) {
        let unlocked = false;
        
        switch (achievement.requirement.type) {
          case 'wpm':
            unlocked = progress.bestWpm >= achievement.requirement.value;
            break;
          case 'accuracy':
            unlocked = progress.bestAccuracy >= achievement.requirement.value;
            break;
          case 'lessons_completed':
            unlocked = progress.totalLessonsCompleted >= achievement.requirement.value;
            break;
        }
        
        if (unlocked) {
          achievement.unlocked = true;
          achievement.unlockedAt = new Date();
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
          const index = progress.achievements.findIndex(a => a.id === achievement.id);
          if (index >= 0) {
            progress.achievements[index] = achievement;
          } else {
            progress.achievements.push(achievement);
          }
        }
      }
    });
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  getHomePageStats(): {
    currentSpeed: number;
    accuracy: number;
    lessonsCompleted: number;
    lastSession?: TypingSession;
  } {
    const progress = this.getUserProgress();
    const sessions = this.getAllSessions();
    const lastSession = sessions[sessions.length - 1];
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–µ—Å—Å–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if (lastSession) {
      return {
        currentSpeed: lastSession.result.wpm,
        accuracy: lastSession.result.accuracy,
        lessonsCompleted: progress.totalLessonsCompleted,
        lastSession
      };
    }
    
    return {
      currentSpeed: 0,
      accuracy: 0,
      lessonsCompleted: 0
    };
  }

  // –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  resetAllStats(): void {
    if (typeof window === 'undefined') return;
    
    localStorage.removeItem(STORAGE_KEY);
    localStorage.removeItem(SESSIONS_KEY);
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  private getDefaultProgress(): UserProgress {
    return {
      totalLessonsCompleted: 0,
      bestWpm: 0,
      averageWpm: 0,
      bestAccuracy: 0,
      averageAccuracy: 0,
      totalTimeSpent: 0,
      currentStreak: 0,
      longestStreak: 0,
      achievements: [],
      recentSessions: []
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export const statisticsStorage = StatisticsStorage.getInstance();